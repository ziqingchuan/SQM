export const multipleChoice  = [
    {
        "question": "关于Brooks提及的软件开发本质难题，下列说法中不准确的是（ 多选 ）\n\n"+
            "A : 本质难题总共有四个，分别为复杂、不可见、可变和质量挑战\n"+
            "B : 既然是本质难题，那就说明是根植于软件开发本身，因此是不可能在软件开发当中得到缓解\n"+
            "C : 严格来说，只有不可见才是真正的“本质”难题，其他三个因项目差异\n"+
            "D : 四大本质难题贯穿软件发展的不同历史阶段，但是在不同历史阶段，相互凸显程度不一样\n",
        "answer": "AB"
    },
    {
        "question": "下列软件应用和开发的典型特征中属于软硬件一体化阶段的是（ 多选 ）\n\n"+
            "A : 可以通过引入操作系统，摆脱了硬件束缚\n"+
            "B : 几乎不需要考虑 需求变更\n"+
            "C : 缺乏科班的软件工程师\n"+
            "D : 系统兼容对应软件开发的成败非常关键\n",
        "answer": "BC"
    },
    {
        "question": "下列名词和术语中不属于软件过程的是有哪些（ 多选 ）\n\n"+
            "A : SCRUM\n"+
            "B : CMM/CMMI\n"+
            "C : GATE方法\n"+
            "D : IDEAL\n",
        "answer": "BD"
    },
    {
        "question": "CMM的创始人是哪位?\n\n"+
            "A : Boehm\n"+
            "B : Juran\n"+
            "C : Humphrey\n"+
            "D : Crosby\n",
        "answer": "C"
    },
    {
        "question": "XP规定开发人员每周工作时间不超过___小时，连续加班不可以超过两周，以免降低生产率？\n\n"+
            "A : 30\n"+
            "B : 40\n"+
            "C : 50\n"+
            "D : 60\n",
        "answer": "B"
    },
    {
        "question": "下列不属于看板方法典型实践的是?（多选）\n\n"+
            "A : 可视化工作流\n"+
            "B : 站立式会议\n"+
            "C : 限定WIP\n"+
            "D : 重构\n",
        "answer": "BD"
    },
    {
        "question": "完成一份完整的项目日程计划，需要下列哪些信息?（多选）\n\n"+
            "A : 任务清单\n"+
            "B : 任务顺序\n"+
            "C : 质量要求\n"+
            "D : 人员资源水平\n",
        "answer": "ABD"
    },
    {
        "question": "在TSP的团队组建过程中，确定软件开发策略的是第几次会议?\n\n"+
            "A : 第一次\n"+
            "B : 第二次\n"+
            "C : 第三次\n"+
            "D : 第四次\n",
        "answer": "C"
    },
    {
        "question": "下列关于挣值管理方法的描述中错误的是?\n\n"+
            "A : 这是一种可以用来跟踪项目预算消耗的方法\n"+
            "B : 这种方法高度依赖估算准确性\n"+
            "C : 这种方法可以支持质量管理\n"+
            "D : 这种方法可以用来跟踪项目进度\n",
        "answer": "C"
    },
    {
        "question": "下列描述当中，属于过程经理的工作内容有哪些（多选）\n\n"+
            "A : 建立团队的开发标准\n"+
            "B : 主持项目周例会\n"+
            "C : 记录周例会的会议记录\n"+
            "D : 制定开发计划\n",
        "answer": "AC"
    },
    {
        "question": "为了制定Schedule plan，下述描述中，哪一项是不需要的？\n\n"+
            "A : Task size\n"+
            "B : Task Order\n"+
            "C : Schedule Hour\n"+
            "D : Task hour for each task\n",
        "answer": "A"
    },
    {
        "question": "有了Task Order、Schedule Hour、Task hour for each task，还需要补充下述哪一项数据就可以定义Schedule Plan了？\n\n"+
            "A : Task List\n"+
            "B : Plan Value\n"+
            "C : Earned Value\n"+
            "D : Nothing\n",
        "answer": "A"
    },
    {
        "question": "下列术语描述的技术或者方法是同类型的是?（ 多选 ）\n\n"+
            "A : CMMI、SPICE、PDCA\n"+
            "B : IDEAL、XP、SCRUM\n"+
            "C : Cleanroom、Gate、TSP\n"+
            "D : Waterfall、SCRUM、XP\n",
        "answer": "AC"
    },
    {
        "question": "“Measure twice, cut once” 描述的是下述哪个软件开发场景\n\n"+
            "A : 软件设计\n"+
            "B : 代码评审\n"+
            "C : 需求开发\n"+
            "D : V&V\n",
        "answer": "B"
    },
    {
        "question": " 整体来看，我们可以把软件的发展分为三大阶段，以下不属于三大主要阶段的是\n\n"+
            "A : 软硬件一体化； (1950s - 1970s)\n"+
            "B : 网络化和服务化； (1990s -)\n"+
            "C : 云计算化和云原生\n"+
            "D : 软件成为独立产品；(1970s - 1990s )\n",
        "answer": "C"
    },
    {
        "question": "以下描述中，不属于软件开发本质困难或者本质挑战的是\n\n"+
            "A : 质量难题\n"+
            "B : 复杂性\n"+
            "C : 不可见性\n"+
            "D : 一致性\n",
        "answer": "A"
    },
    {
        "question": "以下描述中，哪一种实践是软硬件一体化阶段的典型实践\n\n"+
            "A : Code and Fix\n"+
            "B : 迭代式开发\n"+
            "C : 瀑布生命周期模型\n"+
            "D : 成熟度模型\n",
        "answer": "A"
    },
    {
        "question": "对比TSP和SCRUM，下列说法不恰当的是\n\n"+
            "A : 都是过程框架，需要填补具体实践之后才是一个可以工作的过程\n"+
            "B : 一种是计划驱动方法，另外一种是敏捷方法\n"+
            "C : SCRUM适合迭代式场景，TSP适合瀑布场景\n"+
            "D : 两种方法都需要进行度量数据收集、分析，从而支持管理决策\n",
        "answer": "C"
    },
    {
        "question": "以下特征适用麦克勒格Y理论（McGregors Theory Y）激励的场合是\n\n"+
            "A : 关注工作环境，薪金等\n"+
            "B : 更喜欢经常的指导，避免承担责任，缺乏主动性 \n"+
            "C : 自我中心，对组织需求反应淡漠，反对变革 \n"+
            "D : 能够自我约束，自我导向与控制，渴望承担责任\n",
        "answer": "D"
    },
    {
        "question": "以下关于马斯洛的需求层次理论描述不正确的是：（多选）\n\n"+
            "A : 自我实现是寻求自尊（Esteem）\n"+
            "B : 激励来自为没有满足的需求而努力奋斗\n"+
            "C : 低层次的需求必须在高层次需求满足之前得到满足\n"+
            "D : 满足高层次的需求的途径比满足低层次的途径更少\n",
        "answer": "AD"
    },
    {
        "question": "以下关于团队动力学的论述，不恰当的是？\n\n"+
            "A : 马斯洛的需求层次理论可以用来更好地维持激励水平\n"+
            "B : 智力工作的激励方式中，应该尽可能使用鼓励承诺这种方式\n"+
            "C : 麦克勒格的X理论适合用马斯洛底层需求激励\n"+
            "D : 海兹伯格的激励理论区分为内在因素和外在因素两种\n",
        "answer": "A"
    },
    {
        "question": "下列关于挣值管理方法的描述中正确的是（ 多选 ）\n\n"+
            "A : 挣值管理中进度的计算可以区分悲观和乐观两种方式\n"+
            "B : 挣值管理的简单、中级和高级实现三种方式中，只有高级实现才会涉及成本因素\n"+
            "C : 挣值管理与项目类型无关\n"+
            "D : 挣值管理不适用与需求频繁变更的软件项目管理中\n",
        "answer": "ABC"
    },
    {
        "question": "下述关于WBS的描述中，哪些说法不正确的？ \n\n"+
            "A : WBS应该对应OBS \n"+
            "B : WBS提供了范围管理的基础 \n"+
            "C : WBS工作分解最底层的要素是实现目标的充分必要条件 \n"+
            "D : WBS分解的时候，同一层不能应用不同标准\n",
        "answer": "A"
    },
    {
        "question": "下述关于EVM的描述中，哪些说法不正确的？ \n\n"+
            "A : EVM不适用于质量管理 \n"+
            "B : EVM的中级实现中引入成本信息 \n"+
            "C : EVM高度依赖估算准确 \n"+
            "D : EVM可以适应需求变更\n",
        "answer": "B"
    },
    {
        "question": "关于DRL，下列说法中不正确的是（ 多选 ）\n\n"+
            "A : 这是一种模块级开发中质量控制的指标 \n"+
            "B : DRL以单元测试每小时发现缺陷率作为基准，考察上游其他缺陷消除阶段的消除效率\n"+
            "C : DRL以单元测试发现的缺陷个数作为基准，考察上游其他缺陷消除阶段消除缺陷的效率\n"+
            "D : DRL只能预测，不能度量\n",
        "answer": "CD"
    },
    {
        "question": "关于PQI，下列说法中不正确的是（ 多选 ）\n\n"+
            "A : PQI表征模块级别开发中的过程规范化程度\n"+
            "B : PQI越高越好，可以充分保障质量\n"+
            "C : PQI越低越好\n"+
            "D : PQI不能用作质量规划\n",
        "answer": "BCD"
    },
    {
        "question": "关于PQI，下列说法中正确的是（ 多选 ）\n\n"+
            "A : PQI可以辅助判断模块开发质量 \n"+
            "B : PQI可以提供过程改进的依据 \n"+
            "C : PQI确保大于1，从而确保开发质量\n"+
            "D : PQI只能预测，不能度量\n",
        "answer": "AB"
    },
    {
        "question": "关于Yield，下列说法中正确的是（ 多选 ）\n\n"+
            "A : Yield可以辅助判断模块开发质量\n"+
            "B : Yield可以提供过程改进的依据 \n"+
            "C : Yield区分为Process Yield和Phase Yield\n"+
            "D : Yield只能预测，不能度量\n",
        "answer": "ABCD"
    },
    {
        "question": "关于评审速度，下列说法中正确的是\n\n"+
            "A : 进行代码评审的时候，控制评审速度不超过每小时1000LOC就能实现大部分质量要求\n"+
            "B : 实战中，评审速度应该根据资源水平而定，时间充分就评审慢一些\n"+
            "C : 文档评审速度应该控制每小时不超过4页\n"+
            "D : 评审速度与人的技能有关，技能强的人可以突破 每小时1000 LOC代码这个限制\n",
        "answer": "C"
    },
    {
        "question": "关于Humphrey 梳理的Quality Journey，下列说法中正确的是？（多选）\n\n"+
            "A : Quality Journey中列出的步骤可以在适当的时候更换顺序\n"+
            "B : 由于需求是一切工程活动的基础，因此加强需求开发应该是Quality Journey早期的必备步骤\n"+
            "C : Quality Journey仍然仅仅是在“用缺陷管理替代质量管理”这一基本策略之下进行讨论\n"+
            "D : Quality Journey中测试应该先于评审得到贯彻和改善\n",
        "answer": "CD"
    },
    {
        "question":"以下哪项不属于Scrum的三大支柱？\n\n" +
            "A : 透明\n" +
            "B : 检查\n" +
            "C : 适应\n" +
            "D : 效率\n",
        "answer":"D"
    },
    {
        "question":"“完成的定义（DoD）”的主要作用是？\n\n" +
            "A : 限制开发人员自由\n" +
            "B : 确保交付质量基准\n" +
            "C : 缩短会议时间\n" +
            "D : 简化文档工作\n",
        "answer":"B"
    },
    {
        "question":"猪与鸡的比喻主要说明？\n\n" +
            "A : 团队饮食管理\n" +
            "B : 利益相关者参与程度\n" +
            "C : 敏捷估算方法\n" +
            "D : 动物角色扮演\n",
        "answer":"B"
    },
    {
        "question":"以下哪个事件不属于Scrum五大事件？\n\n" +
            "A : 迭代计划会议\n" +
            "B : 需求评审会\n" +
            "C : 每日站会\n" +
            "D : 迭代回顾会议\n",
        "answer":"B"
    },
    {
        "question":"跨职能团队的关键特征是？\n\n" +
            "A : 成员都是全栈工程师\n" +
            "B : 具备端到端交付能力\n" +
            "C : 定期轮换岗位\n" +
            "D : 使用统一开发工具\n",
        "answer":"B"
    },
    {
        "question":"用户故事的3C原则不包括？\n\n" +
            "A : 卡片（card）\n" +
            "B : 协作（collaboration）\n" +
            "C : 交谈（conversation）\n" +
            "D : 确认（confirmation）\n",
        "answer":"B"
    },
    {
        "question":"Scrum术语首次提出的论文是？\n\n" +
            "A : 《敏捷软件开发宣言》\n" +
            "B : 《新型新产品开发策略》\n" +
            "C : 《Scrum指南2020》\n" +
            "D : 《精益思想》\n",
        "answer":"B"
    },
    {
        "question":"产品负责人的核心职责是？\n\n" +
            "A : 主持每日站会\n" +
            "B : 管理产品Backlog\n" +
            "C : 解决技术难题\n" +
            "D : 制定团队KPI\n",
        "answer":"B"
    },
    {
        "question":"Scrum团队理想规模通常是？\n\n" +
            "A : 3-5人\n" +
            "B : 5-7人\n" +
            "C : 10人或更少\n" +
            "D : 15-20人\n",
        "answer":"C"
    },
    {
        "question":"Scrum的理论基础是？\n\n" +
            "A : 预测性计划和严格流程\n" +
            "B : 经验主义和精益思维\n" +
            "C : 六西格玛管理\n" +
            "D : 瀑布模型\n",
        "answer":"B"
    },
    {
        "question":"行为驱动开发是从什么方法演变而来？\n\n" +
            "A : 瀑布模型\n" +
            "B : 测试驱动开发TDD\n" +
            "C : 极限编程XP\n" +
            "D : Scrum\n",
        "answer":"B"
    },
    {
        "question":"“金发女孩”估算技术主要用于？\n\n" +
            "A : 调整工作项到合适大小\n" +
            "B : 确定优先级顺序\n" +
            "C : 分配开发任务\n" +
            "D : 评估代码质量\n",
        "answer":"A"
    },
    {
        "question":"故事点的估算基于什么原则？\n\n" +
            "A : 绝对时间单位\n" +
            "B : 相对工作量比较\n" +
            "C : 代码行数预测\n" +
            "D : 任务复杂度评分\n",
        "answer":"B"
    },
    {
        "question":"当前最常见的Sprint周期是？\n\n" +
            "A : 1周\n" +
            "B : 3周\n" +
            "C : 2周\n" +
            "D : 4周\n",
        "answer":"C"
    },
    {
        "question":"用户故事地图主要解决传统Backlog的什么问题？\n\n" +
            "A : 全局视角缺失\n" +
            "B : 需求数量过多\n" +
            "C : 技术实现复杂\n" +
            "D : 测试覆盖率不足\n",
        "answer":"A"
    },
    {
        "question":"某团队使用计划扑克估算时，发现对“支付功能”的估算差异极大（5、8、13）最可能的原因是？\n\n" +
            "A : 团队成员能力差异\n" +
            "B : 会议时间安排不合理\n" +
            "C : 扑克牌工具使用错误\n" +
            "D : 需求理解不一致\n",
        "answer":"D"
    },
    {
        "question":"验收标准的正确格式是？\n\n" +
            "A : When → Then → Given\n" +
            "B : Then → Given → When\n" +
            "C : Given → When → Then\n" +
            "D : When → Given → Then\n",
        "answer":"C"
    },
    {
        "question":"在Scrum框架中，哪个事件的时间盒是每一个月Sprint最多8小时？\n\n" +
            "A : Sprint回顾会议\n" +
            "B : 每日站会\n" +
            "C : Sprint计划会议\n" +
            "D : Sprint评审会议\n",
        "answer":"C"
    },
    {
        "question":"每日站会的核心关注点应该是？\n\n" +
            "A : 轮流报告个人昨天的工作细节\n" +
            "B : 检查Sprint进度并识别障碍\n" +
            "C : 讨论技术实现方案\n" +
            "D : 更新燃尽图\n",
        "answer":"B"
    },
    {
        "question":"XP方法最早在哪个项目中得到系统应用？\n\n" +
            "A : 克莱斯勒薪资系统\n" +
            "B : NASA航天飞机软件\n" +
            "C : 微软Windows系统\n" +
            "D : 亚马逊电商平台\n",
        "answer":"A"
    },
    {
        "question":"SAFe框架中协调多个团队同步交付的核心机制是？\n\n" +
            "A : Scrum of Scrums\n" +
            "B : 每日站会\n" +
            "C : ART\n" +
            "D : PI Objectives\n",
        "answer":"A"
    },
    {
        "question":"根据Scrum价值观，当发现Sprint目标无法实现时，团队最应该展现的是？\n\n" +
            "A : 隐瞒进度风险\n" +
            "B : 要求延长Sprint\n" +
            "C : 降低质量标准\n" +
            "D : 及时透明沟通\n",
        "answer":"D"
    },
    {
        "question":"有效的Sprint演示应该避免？\n\n" +
            "A : 展示实际可运行的代码\n" +
            "B : 详细解释实现技术细节\n" +
            "C : 聚焦核心业务价值\n" +
            "D : 获取利益相关者反馈\n",
        "answer":"B"
    },
    {
        "question":"Less框架与SAFe的核心区别在于？\n\n" +
            "A : 保持单产品Backlog，不添加管理层级\n" +
            "B : 引入Release Train工程师角色\n" +
            "C : 要求所有团队使用相同技术栈\n" +
            "D : 强制采用测试驱动开发\n",
        "answer":"A"
    },
    {
        "question":"Scrum Guide 2020 取消的旧版概念是？\n\n" +
            "A : Product Owner\n" +
            "B : Sprint Retrospective\n" +
            "C : Definition of Done\n" +
            "D : 专属“开发团队”称谓\n",
        "answer":"D"
    },
    {
        "question":"根据国际Scrum联盟认证要求，一个Sprint的最大时长是？\n\n" +
            "A : 1周\n" +
            "B : 2周\n" +
            "C : 1个月\n" +
            "D : 6周\n",
        "answer":"C"
    },
    {
        "question":"极限编程的四个核心价值观不包括下面哪个？\n\n" +
            "A : 沟通\n" +
            "B : 简单\n" +
            "C : 反馈\n" +
            "D : 计划\n",
        "answer":"D"
    },
    {
        "question":"在极限编程中，哪项实践强调所有生产代码都由两个人共同完成？\n\n" +
            "A : 持续集成\n" +
            "B : 代码集体拥有制\n" +
            "C : 结对编程\n" +
            "D : 重构\n",
        "answer":"C"
    },
    {
        "question":"软件开发的四项基本活动是编码、测试、倾听和____？\n\n" +
            "A : 设计\n" +
            "B : 部署\n" +
            "C : 维护\n" +
            "D : 沟通\n",
        "answer":"A"
    },
    {
        "question":"在极限编程中，“计划游戏”的主要目的是什么？\n\n" +
            "A : 制定详细的技术实施方案\n" +
            "B : 结合业务和技术考虑，决定范围、优先级和发布计划\n" +
            "C : 让程序员独立决定项目进度\n" +
            "D : 评估团队成员的个人能力\n",
        "answer":"B"
    },
    {
        "question":"下列哪项是XP提倡的简单设计原则之一？\n\n" +
            "A : 消除重复的逻辑\n" +
            "B : 尽可能多的使用设计模式\n" +
            "C : 为未来的需求提前设计\n" +
            "D : 编写详尽的设计文档\n",
        "answer":"A"
    },
    {
        "question":"测试驱动开发TDD的核心循环是？\n\n" +
            "A : 红（失败测试）→ 绿（通过实现）→ 重构\n" +
            "B : 设计 → 编码 → 测试\n" +
            "C : 编码 → 测试 → 部署\n" +
            "D : 需求分析 → 设计 → 编码\n",
        "answer":"A"
    },
    {
        "question":"在XP中，由谁负责编写功能测试？\n\n" +
            "A : 程序员\n" +
            "B : 项目经理\n" +
            "C : 客户\n" +
            "D : 测试工程师\n",
        "answer":"C"
    },
    {
        "question":"“YAGNI”原则指的是什么？\n\n" +
            "A : 你需要它\n" +
            "B : 你不会需要它\n" +
            "C : 总是优先考虑性能\n" +
            "D : 今天实现，为明天设计\n",
        "answer":"B"
    },
    {
        "question":"持续集成的核心目标是？\n\n" +
            "A : 尽早发现并解决集成问题\n" +
            "B : 自动化所有开发任务\n" +
            "C : 减少代码编写量\n" +
            "D : 取代版本控制系统\n",
        "answer":"A"
    },
    {
        "question":"在持续集成实践中，“主线”指的是什么？\n\n" +
            "A : 开发者的本地代码分支\n" +
            "B : 用于发布稳定版本的特定分支\n" +
            "C : 代码库中单一的、共享的、代表项目当前集成状态的分支\n" +
            "D : 存放测试代码的分支\n",
        "answer":"C"
    },
    {
        "question":"根据持续集成的实践，以下哪项内容不应该纳入版本控制系统？\n\n" +
            "A : 源代码\n" +
            "B : 数据库模式定义脚本\n" +
            "C : 构建脚本\n" +
            "D : 编译后的二进制文件或构建产物\n",
        "answer":"D"
    },
    {
        "question":"什么是“自测试构建”？\n\n" +
            "A : 只需要编译代码的构建\n" +
            "B : 包含自动化测试验证，能自我验证正确性的构建过程\n" +
            "C : 由测试人员手动执行的构建\n" +
            "D : 仅在本地环境运行的构建\n",
        "answer":"B"
    },
    {
        "question":"在XP的结对编程中，不负责直接编码的伙伴主要思考什么？\n\n" +
            "A : 代码的格式是否符合规范\n" +
            "B : 下一个功能如何实现\n" +
            "C : 具体的变量命名\n" +
            "D : 从更战略性的角度思考，如整体方法是否可行、是否有遗漏的测试用例、是否能简化系统等\n",
        "answer":"D"
    },
    {
        "question":"持续集成的实践要求自动化构建过程能够通过什么方式触发？\n\n" +
            "A : 每天固定时间\n" +
            "B : 每周一次\n" +
            "C : 一个简单的单一命令\n" +
            "D : 项目经理批准后\n",
        "answer":"C"
    },
    {
        "question":"在持续集成实践中，经验法则是每个团队成员每天至少向主线提交代码更改的频率是？\n\n" +
            "A : 至少一次\n" +
            "B : 至少两次\n" +
            "C : 每小时一次\n" +
            "D : 每周一次\n",
        "answer":"A"
    },
    {
        "question":"当集成构建失败时，团队的首选处理方式通常是？\n\n" +
            "A : 立即尝试在主线上修复问题\n" +
            "B : 忽略该失败，继续开发新功能\n" +
            "C : 恢复导致失败的提交\n" +
            "D : 等待其他成员帮助解决\n",
        "answer":"C"
    },
    {
        "question":"下列哪项不属于持续集成服务的典型功能？\n\n" +
            "A : 监控版本控制仓库，检测新的提交\n" +
            "B : 自动从仓库检出最新的主线代码\n" +
            "C : 报告构建结果\n" +
            "D : 自动编写新的单元测试\n",
        "answer":"D"
    },
    {
        "question":"以下关于持续集成与持续交付关系的描述，哪项是正确的？\n\n" +
            "A : CI的CD的后续阶段，CD成功后才进行CI\n" +
            "B : CI是实现CD的必要前提\n" +
            "C : CI和CD是互斥的概念，不能同时实施\n" +
            "D : CD主要关注开发环境，CI主要关注生产环境\n",
        "answer":"B"
    },
    {
        "question":"Kanban方法起源于哪个国家的制造业？\n\n" +
            "A : 美国\n" +
            "B : 德国\n" +
            "C : 日本\n" +
            "D : 中国\n",
        "answer":"C"
    },
    {
        "question":"在Kanban中，代表具体工作项并记录必要信息的工具是？\n\n" +
            "A : Kanban卡片\n" +
            "B : 燃尽图\n" +
            "C : 用户画像\n" +
            "D : 甘特图\n",
        "answer":"A"
    },
    {
        "question":"Kanban系统成员对于工作流的明确且共同的认知被称为？\n\n" +
            "A : 服务水平期望\n" +
            "B : 工作流的定义\n" +
            "C : 在制品限制\n" +
            "D : 价值单位\n",
        "answer":"B"
    },
    {
        "question":"在Kanban中，介于开始节点与结束节点的任何一个工作项被称为？\n\n" +
            "A : 待办事项\n" +
            "B : 已完成工作\n" +
            "C : 进行中工作\n" +
            "D : 瓶颈\n",
        "answer":"C"
    },
    {
        "question":"Kanban方法的核心实践不包括？\n\n" +
            "A : 定义并可视化工作流程\n" +
            "B : 主动管理工作流程中的事项\n" +
            "C : 改进工作流程\n" +
            "D : 规定固定的迭代周期\n",
        "answer":"D"
    },
    {
        "question":"根据所学的硬币传递游戏的结果，哪种传递方式使得所有硬币最快达到客户手中？\n\n" +
            "A : 每次传递20枚硬币\n" +
            "B : 每次传递5枚硬币\n" +
            "C : 每次传递1枚硬币\n" +
            "D : 三种方式时间相同\n",
        "answer":"C"
    },
    {
        "question":"在Kanban中，为处理紧急工作而设置的特殊通道通常被称为？\n\n" +
            "A : 快速通道\n" +
            "B : 慢速通道\n" +
            "C : 阻塞通道\n" +
            "D : 评审通道\n",
        "answer":"A"
    },
    {
        "question":"看板方法中，用于限制每个工作阶段在制品数量的关键概念是？\n\n" +
            "A : 拉动系统\n" +
            "B : 在制品限制\n" +
            "C : 泳道\n" +
            "D : 周期时间\n",
        "answer":"B"
    },
    {
        "question":"在Kanban中，当某个工作列达到在制品数量上限时，团队应该？\n\n" +
            "A : 暂停拉入新任务，优先完成现有任务\n" +
            "B : 立即增加该列的在制品数量上限\n" +
            "C : 将现有任务移到下一列\n" +
            "D : 开始新的任务以保持流动\n",
        "answer":"A"
    },
    {
        "question":"以下哪个是Kanban的核心度量指标，指的是一个工作项从正式开始处理到完成交付之间的总时长？\n\n" +
            "A : 在制品数量（WIP）\n" +
            "B : 产能\n" +
            "C : 工作项存续时长\n" +
            "D : 周期时间\n",
        "answer":"D"
    },
    {
        "question":"Scrum和Kanban的主要区别之一在于框架性质，Scrum是迭代式框架而Kanban是？\n\n" +
            "A : 规定式框架\n" +
            "B : 会议驱动框架\n" +
            "C : 流动式框架\n" +
            "D : 固定周期框架\n",
        "answer":"C"
    },
    {
        "question":"ScrumBan是由Corey Ladas提出的，它通常被视为？\n\n" +
            "A : Scrum到Kanban的中间态或过渡\n" +
            "B : 一种全新的敏捷方法\n" +
            "C : XP实践的替代方案\n" +
            "D : 一种项目管理软件\n",
        "answer":"A"
    },
    {
        "question":"DevOps的核心目标不包括？\n\n" +
            "A : 提升交付速度\n" +
            "B : 提升交付可靠性\n" +
            "C : 打破开发与运维之间的壁垒\n" +
            "D : 固定软件架构\n",
        "answer":"D"
    },
    {
        "question":"将安全保障集成到软件开发生命周期各阶段，强调“内建安全”而非“事后补救”的理念是？\n\n" +
            "A : AIOps\n" +
            "B : DevSecOps\n" +
            "C : Cloud Native\n" +
            "D : CI/CD\n",
        "answer":"B"
    },
    {
        "question":"在DevOps实践中，仅将一小部分用户/流量切换到新版本，观察运行情况后逐步扩大流量的部署策略是？\n\n" +
            "A : 蓝绿部署\n" +
            "B : 持续部署\n" +
            "C : 金丝雀发布\n" +
            "D : 基础设施即代码\n",
        "answer":"C"
    },
    {
        "question":"根据DevOps的DORA指标，精英级别的团队的部署频率通常是？\n\n" +
            "A : 每日多次\n" +
            "B : 每周一次到每日一次\n" +
            "C : 每月一次到每周一次\n" +
            "D : 每月不到一次\n",
        "answer":"A"
    },
    {
        "question":"DevOps与敏捷的关系，以下描述最准确的是？\n\n" +
            "A : DevOps取代了敏捷\n" +
            "B : 敏捷是DevOps的一个分支\n" +
            "C : DevOps扩展了敏捷的理念，关注从开发到运维的全生命周期\n" +
            "D : DevOps只关注技术工具，敏捷只关注流程\n",
        "answer":"C"
    },
    {
        "question":"使用代码化方式管理和配置基础设施，将手动运维操作转为可编程脚本/配置描述的是？\n\n" +
            "A : 基础设施即代码\n" +
            "B : 容器化技术\n" +
            "C : 微服务\n" +
            "D : 持续监控\n",
        "answer":"A"
    },
    {
        "question":"敏捷软件开发出现的根本原因是为了帮助处理软件开发的？\n\n" +
            "A : 复杂性与可变性\n" +
            "B : 低成本与高效率\n" +
            "C : 标准化与一致性\n" +
            "D : 文档化与流程化\n",
        "answer":"A"
    },
    {
        "question":"根据敏捷观点，评价软件项目成功的最重要标准是？\n\n" +
            "A : 按时完成项目\n" +
            "B : 不超过预算\n" +
            "C : 所有功能均按规格实现\n" +
            "D : 为客户创造价值\n",
        "answer":"D"
    },
    {
        "question":"极限编程更侧重于？\n\n" +
            "A : 流程和可视化管理\n" +
            "B : 工程实践如TDD、重构等\n" +
            "C : 项目时间盒管理\n" +
            "D : 客户需求优先级排序\n",
        "answer":"B"
    },
]
