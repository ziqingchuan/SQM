export const shortAnswer = [
    {
        question: "简述软件发展三大阶段以及典型的开发方法",
        answer: "1. 软硬件一体化：线性顺序过程，事实上是硬件开发流程\n" +
            "2. 软件成为独立产品：结构化程序设计、瀑布模型、成熟度运动\n" +
            "3. 网络化和服务化：迭代式开发、敏捷运动"
    },
    {
        question: "简述软件项目管理和软件过程管理",
        answer: "软件项目管理：应用工具、方法、技术以及人员能力来完成软件项目，实现项目目标的过程\n" +
            "软件过程管理：让软件过程在开发效率、质量等方面有更好的性能绩效"
    },
    {
        question: "简述生命周期模型和软件过程的区别与联系",
        answer: "1. 生命周期模型是对一个软件过程的人为划分\n" +
            "2. 生命周期模型是软件开发过程的框架，是对软件开发过程的粗粒度划分\n" +
            "3. 生命周期模型往往不包含技术实践"
    },
    {
        question: "简述如何理解瀑布模型",
        answer: "瀑布模型不是单一的模型而是一系列模型，覆盖最简单到最复杂场景，\n" +
            "软件项目应该结合实际情况选择合适过程元素的瀑布模型"
    },
    {
        question: "请描述CMMI模型的5个等级的特征，解释为什么CMMI模型不应该是敏捷方法的对立面？四五级和普通等级的区别是什么？",
        answer: "五个等级特征：\n" +
            "1. 原始级别：开发相对混乱，没有过程概念\n" +
            "2. 已管理级别：体现出项目管理的特征，有项目计划、需求管理等过程\n" +
            "3. 已定义级别：小组可以基于标准流程和相应规范定义自己的过程\n" +
            "4. 定量管理级别：构建预测模型，以统计过程控制的手段来管理过程\n" +
            "5. 优化级：继续识别过程偏差，找到问题根源并消除，避免未来继续出错\n" +
            "原因：\n" +
            "CMMI是过程管理/改进模型，而大部分敏捷方法都是开发方法，两者性质完全不同，因此不是对立的。\n" +
            "区别：\n" +
            "普通等级关注的都是当前的状态，而四五级是根据结果（未来）进行管理。"
    },
    {
        question: "请分别简述PDCA模型和IDEAL模型的主要步骤",
        answer: "PDCA模型：\n" +
            "分析现状，找出问题 → 分析影响质量的原因 → 找出措施 → 拟定计划 → 执行措施与计划 → 检查效果，发现问题 → 总结经验纳入标准 → 遗留问题传入下一个PDCA循环\n" +
            "IDEAL模型：\n" +
            "I: 开始（Initiating）D: 诊断（Diagnosing） E: 建立（Establishing）A: 执行（Acting）L: 调整（Leveraging）\n"
    },
    {
        question: "请简述敏捷宣言的四个价值观",
        answer: "1. 个体和互动胜过流程和工具\n" +
            "2. 可以工作的软件胜过详尽的文档\n" +
            "3. 客户合作胜过合同谈判\n" +
            "4. 响应变化胜过遵循计划\n" +
            "尽管右项有其价值，我们更重视左项的价值"
    },
    {
        question: "敏捷方法的特征有哪些？哪些关于敏捷方法的特征表述可能带有误导？为什么？",
        answer: "特征：\n" +
            "① 小周期迭代式；② 持续交付；③ 敏捷宣言\n" +
            "带有误导的表述：\n" +
            "1. 轻量级方法：事实上，敏捷方法对工程规范有着极为严格的要求，很难说就是轻量级方法。\n" +
            "2. 拥抱变更、变更驱动：仅仅是个口号，对待变更，所有软件工程方法都是限制和管理的态度。\n" +
            "3. 测试驱动开发（TDD）可以提高开发质量：并没有足够的证据支持这一说法。"
    },
    {
        question: "简要描述按照通用计划框架，为了开发合理的项目计划，应该要做哪些估算？PROBE方法充当什么角色？",
        answer: "应该要做规模估算、资源估算；\n" +
            "PROBE方法充当精确度量与早期规划的桥梁"
    },
    {
        question: "谈谈你对项目估算的认识，并简述应用PROBE方法估算的优缺点。",
        answer: "规模估算往往可以根据历史数据来完成；而时间估算的偏差产生原因很复杂，历史数据参考价值不大。\n" +
            "估算本质上是一种猜测，追求的目标是一致性以及估算结果的使用者对估算结果的信心。\n" +
            "优缺点：\n" +
            "优点：PROBE方法通过定义的估算过程和数据收集以及使用的框架，使得估算结果尽可能一致，增强用户对估算结果的信心。\n" +
            "缺点：这种方法非常依赖高质量的历史数据，一旦数据不完整就可能导致估算结果有显著偏差。"
    },
    {
        question: "简述软件项目规模估算的基本要点",
        answer: "1. 尽可能划分详细一些\n" +
            "2. 建立对估算结果的信心\n" +
            "3. 依赖历史数据进行估算\n" +
            "4. 估算要的是过程而非结果"
    },
    {
        question: "请描述一下PROBE方法的基本原理和过程，并简述为什么不使用历史数据中的生产效率数据？",
        answer: "估算的基本原理：\n" +
            "1. 设立合理的代理作为精确度量与早期规划之间的桥梁\n" +
            "2. 相对大小而非绝对大小\n" +
            "估算的过程：\n" +
            "概要设计 → 代理识别和代理规模 → 估算并调整程序规模、资源 → 计算预测区间\n" +
            "理由：\n" +
            "在估算资源需求时，生产效率一般在分母上，考虑个体软件工程师的生产效率差异，容易导致估算偏差范围变大。\n"
    },
    {
        question: "请简述DevOps的三个步骤",
        answer: "第一步: 从左到右快速流动\n" +
            "第二步: 从右到左快速反馈\n" +
            "第三步: 在整个过程中持续学习"
    },
    {
        question: "简述DevOps的特点以及为什么流行",
        answer: "1. 敏捷团队项目管理：增强网站和移动应用软件开发的管理\n" +
            "2. 软件开发过程的优化：通过持续集成和持续交付功能实现，使用自动版本控制系统简化了代码升级\n" +
            "3. 促进协作：Git允许开发人员在具有订单项回滚能力的团队中进行协作\n" +
            "4. 通过自动化提高效率：借助CI/CD工具自动化的管理软件开发的生命周期"
    },
    {
        question: "简述DevOps的技术、实践",
        answer: "开发运维一体化；领域驱动设计为指导的微服务框架；大量虚拟化技术的使用；强大的工具链支持高水平自动化\n" +
            "实践：\n" +
            "培养协作和无责沟通的文化；采用CI/CD；使用自动化避免手动工作；在开发生命周期的早期加入安全性"
    },
    {
        question: "简述A/FR、PQI的计算方式以及这两个指标的用途。",
        answer: "A/FR：质检失效比\n" +
            "A/FR = 质检成本 / 失效成本 = （设计评审时间 + 代码评审时间）/ （编译时间 + 单元测试时间）\n" +
            "用途：理论上，A/FR的值越大意味质量更高，但他过大说明评审过多，开发效率低下\n" +
            "PQI：过程质量指标\n" +
            "PQI = 设计质量 * 设计评审质量 * 代码质量 * 代码评审质量 * 程序质量\n" +
            "用途：判断模块开发质量；规划质量活动计划；过程改进"
    },
    {
        question: "请结合A/FR、PQI、Review Rate、DRL、Yield尽可能具体描述一个软件项目应该如何从多方面来确保开发的高质量？",
        answer: "1. 按照A/FR、PQI等指标要求，安排个人评审与小组评审\n" +
            "2. 评审时间应多于测试时间两倍以上（A/FR）；评审速度要求（Review Rate）\n" +
            "3. 利用Yield指标构建质量预测模型，更加积极地判断和控制开发质量\n" +
            "4. 依据PQI和Yield指标所体现的信息，通过过程改进来提高开发质量"
    },
    {
        question: "如果对质量的追求是无止境的，在不考虑资源和成本的前提下，有哪些可能有效的策略？",
        answer: "1. 重视测试以及测试过程的文档化\n" +
            "2. 重视小组评审与个人评审\n" +
            "3. 重视设计\n" +
            "4. 开展设计验证"
    },
    {
        question: "如何制定一份让人无法拒绝的计划？请描述基本步骤和一些注意事项。",
        answer: "1. 制定日程计划，进行规模估算、资源估算以及日程的规划，要注意结合历史数据\n" +
            "2. 制定质量计划，确认需要开展的质量保证活动以及开展的程度（如时间、人数与目标）\n" +
            "3. 制定风险计划，对可能发生的风险进行识别与应对，从而消除潜在问题对项目的负面影响\n" +
            "4. 对项目进行定量管理",
    },
    {
        question: "挣值管理有三种实现方式，分别是简单、中级和高级，分别阐述上述三种方式的要点",
        answer: "1. 简单实现：仅关注进度信息。首先建立WBS，定义工作范围；其次为每一项工作定义计划价值（PV）；最后按照规则将某一数值赋值给已完成的工作，该值成为挣值（EV）。\n" +
            "2. 中级实现：在简单实现基础上加入日程偏差的计算。日程偏差 SV = EV - PV； 日程偏差指数 SPI = EV / PV\n" +
            "3. 高级实现：加入成本线（AC）、预测线（BAC），当任务足够多时，让预测线尽可能平直，同时延伸挣值线，找到与预测线的交点，就可以明确项目的落后时间。"
    },
    {
        question: "请结合软件开发的特点介绍软件项目管理中自主性团队的必要性以及自主团队应该具备的特征。",
        answer: "软件开发是一种智力活动，开发者是智力劳动者，对于智力劳动者而言，管理的第一准则就是智力劳动者不能被管理而是实现自我管理。\n" +
            "自主性团队的特征：\n" +
            "1. 自行定义项目的目标\n" +
            "2. 自行决定团队组成形式以及成员角色\n" +
            "3. 自行决定项目的开发策略\n" +
            "4. 自行定义项目的开发过程\n" +
            "5. 自行制定项目的开发计划\n" +
            "6. 自行度量、管理和控制项目工作"
    },
    {
        question: "结合“软件开发作为一种知识工作，需要领导者而不是一般的经理”这句话，阐述知识工作领导者应具备的品质或特点",
        answer: "1. 善于倾听团队成员的想法并加以分析和改进\n" +
            "2. 善于通过询问来诱导团队成员向正确的方向前进\n" +
            "3. 善于通过激励以及设定目标等方式吸引团队成员努力表现\n" +
            "4. 出现分歧时，善于沟通促成一致意见\n"
    },
    {
        question: "列出TSP角色并解释他们的职责",
        answer: "1. 项目组长：建设和维持高效率团队；激励团队成员工作；处理团队成员问题；充当会议组织者和协调者\n" +
            "2. 计划经理：开发完整准确的团队计划和个人计划\n" +
            "3. 开发经理：充分利用团队成员的技能开发优秀的软件产品\n" +
            "4. 质量经理：带领团队开发和跟踪质量计划；向项目组长警示质量问题\n" +
            "5. 过程经理：带领成员记录和跟踪过程数据并支持过程改进\n" +
            "6. 支持经理：提供合适的工具和环境；主持配置管理委员会\n" +
            "7. 开发人员：负责软件产品的开发"
    },
    {
        question: "简述Quality Journey的步骤",
        answer: "① 各种测试\n" +
            "② 进入测试前的产物质量提升\n" +
            "③ 评审过程度量和稳定\n" +
            "④ 质量意识和主人翁态度\n" +
            "⑤ 个体review的度量和稳定\n" +
            "⑥ 诉诸设计\n" +
            "⑦ 缺陷预防\n" +
            "⑧ 用户质量观——其他质量属性"
    }
]